/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.73
 * Generated at: 2023-03-27 11:43:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>community</title>\r\n");
      out.write("\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"resources/css/main-style.css\">\r\n");
      out.write("\r\n");
      out.write("    <!--  fontawesome 사이트 아이콘 이용   -->\r\n");
      out.write("    <script src=\"https://kit.fontawesome.com/f7459b8054.js\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <!-- \r\n");
      out.write("        기존 영역 분할에 사용한 div, span 태그는\r\n");
      out.write("        태그의 이름만 봤을 때 나눈다는 것 이외의 의미를 파악할 수 없다.\r\n");
      out.write("        -> id, 또는 class 속성을 필수적으로 추가해야하는 번거로움이 있음\r\n");
      out.write("\r\n");
      out.write("        이러한 문제점을 해결하고자\r\n");
      out.write("        태그의 이름만으로 어느정도 어떤 역할을 하는지 알 수 있고\r\n");
      out.write("        추가적으로 웹 접근성 향상에 도움이되는\r\n");
      out.write("        시맨틱 태그(Semantic Tag, 의미있는 태그)가 HTML5에서 추가됨.\r\n");
      out.write("\r\n");
      out.write("        * 시맨틱 태그는 div 태그의 이름만 바뀐 것으로 생각하는게 좋다!\r\n");
      out.write("         \r\n");
      out.write("        [시맨틱 태그 종류]\r\n");
      out.write("        <main> : 현재 문서의 주된 콘텐츠를 작성하는 영역\r\n");
      out.write("\r\n");
      out.write("        <header> : 문서의 제목, 머리말 영역\r\n");
      out.write("\r\n");
      out.write("        <footer> : 문선의 하단 부분, 꼬리말, 정보 작성 영역\r\n");
      out.write("\r\n");
      out.write("        <nav> : 나침반 역할(다른 페이지, 사이트 이동)의 링크 작성 영역\r\n");
      out.write("\r\n");
      out.write("        <aside> : 사이드바, 광고 등을 표시하는 양쪽 영역\r\n");
      out.write("        \r\n");
      out.write("        <section> : 구역을 구분하기 위한 영역\r\n");
      out.write("\r\n");
      out.write("        <article> : 본문과 독립된 콘텐츠를 작성하는 영역\r\n");
      out.write("    -->\r\n");
      out.write("\r\n");
      out.write("    <main>\r\n");
      out.write("       \r\n");
      out.write("	  <!-- 내부 접근 절대 경로 -->\r\n");
      out.write("		");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/views/common/header.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("        <section class=\"content\">\r\n");
      out.write("            <section class=\"content-1\">\r\n");
      out.write("\r\n");
      out.write("                <h3>이메일 검색(AJAX)</h3>\r\n");
      out.write("                <p>회원 정보 조회</p>\r\n");
      out.write("\r\n");
      out.write("                이메일 검색 : <input type=\"text\" name=\"inputEmail\" id=\"input1\">\r\n");
      out.write("                <div id=\"result1\" style=\"height : 150px\"></div>\r\n");
      out.write("                <button id=\"btn1\">검색하기(이메일)</button>\r\n");
      out.write("\r\n");
      out.write("                <h3>회원 목록 조회</h3>\r\n");
      out.write("                <div id=\"result2\" style=\"height: 150px\"></div>\r\n");
      out.write("\r\n");
      out.write("            </section>\r\n");
      out.write("\r\n");
      out.write("            <section class=\"content-2\">\r\n");
      out.write("\r\n");
      out.write("                <c:choose>\r\n");
      out.write("                    <c:when test=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ empty sessionScope.loginMember }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("                        <form action=\"member/login\" name=\"login-form\" mehtod=\"POST\">\r\n");
      out.write("        \r\n");
      out.write("                            <!-- 아이디, 비밀번호, 로그인 버튼 -->\r\n");
      out.write("                            <fieldset id=\"id-pw-area\">\r\n");
      out.write("                                <section>\r\n");
      out.write("                                    <input type=\"text\" name=\"inputEmail\"\r\n");
      out.write("                                     placeholder=\"아이디\" autocomplete=\"off\" onsubmit= \"return loginValidate()\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${cookie.saveId.value}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("                                    <!-- autocomplete=\"off\" : 자동완성 사용 X -->\r\n");
      out.write("                \r\n");
      out.write("                                    <input type=\"password\" name=\"inputPw\" placeholder=\"비밀번호\">\r\n");
      out.write("                                </section>\r\n");
      out.write("                \r\n");
      out.write("                                <section>\r\n");
      out.write("                                    <!-- type=\"submit\"이 기본값 -->\r\n");
      out.write("                                    <button>로그인</button>\r\n");
      out.write("                                </section>\r\n");
      out.write("                            </fieldset>\r\n");
      out.write("\r\n");
      out.write("                            <c:if test=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ !empty cookie.saveId.value}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("\r\n");
      out.write("                                ");
      out.write("\r\n");
      out.write("                                <c:set var=\"chk\" value=\"checked\"/>\r\n");
      out.write("\r\n");
      out.write("                            </c:if>\r\n");
      out.write("                \r\n");
      out.write("                \r\n");
      out.write("                            <!-- label 태그 내부에 input태그를 작성하면 자동 연결됨 -->\r\n");
      out.write("                            <label>\r\n");
      out.write("                                <input type=\"checkbox\" name=\"saveId\" ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${chk}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(" id=\"saveId\"> 아이디 저장\r\n");
      out.write("                            </label>\r\n");
      out.write("                \r\n");
      out.write("                \r\n");
      out.write("                            <!-- 회원가입 / ID/PW 찾기 -->\r\n");
      out.write("                            <article id=\"signUp-find-area\">\r\n");
      out.write("                                <a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/member/signUp\">회원가입</a>\r\n");
      out.write("                                <span>|</span>\r\n");
      out.write("                                <a href=\"#\">ID/PW찾기</a>\r\n");
      out.write("                            </article>\r\n");
      out.write("                        </form>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("                    </c:when>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("                </c:choose>\r\n");
      out.write("\r\n");
      out.write("                \r\n");
      out.write("            </section>\r\n");
      out.write("        </section>\r\n");
      out.write("\r\n");
      out.write("    </main>\r\n");
      out.write("    \r\n");
      out.write("     <!-- footer include -->\r\n");
      out.write("    \r\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/views/common/footer.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("	<!-- jQuery 라이브러리 추가 -->\r\n");
      out.write(" 	<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\" integrity=\"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("\r\n");
      out.write("    <!--  main.js 연결 -->\r\n");
      out.write("	<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/js/main.js\"></script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
